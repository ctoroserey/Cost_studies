xlim(0.3,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Dollars)") +
theme_classic()
x <- seq(0,1,length=84) # for plotting
ggplot(data = summaryData, aes(propComplete, (Earnings / 100), color = Group)) +
geom_point(size = 2, show.legend = F) +
geom_line(aes(x, coeffsEarn[1] + coeffsEarn[2]*x + coeffsEarn[3]*(x^2)), size = lthick ) +
scale_color_manual(values = cols) +
xlim(0.3,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Dollars)") +
theme_classic()
plot(fitted(lmEarn))
plot(fitted(lmEarn), type = "line")
fitLine <- coeffsEarn[1] + coeffsEarn[2]*x + coeffsEarn[3]*(x^2)
fitLine
plot(x,fitLine)
ggplot(data = summaryData, aes(propComplete, Earnings, color = Group)) +
geom_point(size = 2, show.legend = F) +
geom_line(aes(x, fitLine), size = lthick) +
scale_color_manual(values = cols) +
xlim(0.3,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Dollars)") +
theme_classic()
plot(summaryData$propComplete, fitted(lmEarn))
ggplot(data = summaryData, aes(propComplete, Earnings, color = Group)) +
geom_point(size = 2, show.legend = F) +
geom_line(aes(tempLine, earnFitLine), size = lthick) +
scale_color_manual(values = cols) +
xlim(0,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Dollars)") +
theme_classic()
summaryData$tempLine <- seq(0,1,length=84) # for plotting
summaryData$earnFitLine <- coeffsEarn[1] + coeffsEarn[2]*summaryData$tempLine + coeffsEarn[3]*(summaryData$tempLine^2)
ggplot(data = summaryData, aes(propComplete, Earnings, color = Group)) +
geom_point(size = 2, show.legend = F) +
geom_line(aes(tempLine, earnFitLine), size = lthick) +
scale_color_manual(values = cols) +
xlim(0,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Dollars)") +
theme_classic()
ggplot(data = summaryData, aes(propComplete, Earnings)) +
geom_point(aes(color = Group), size = 2, show.legend = F) +
geom_line(aes(tempLine, earnFitLine), size = lthick) +
scale_color_manual(values = cols) +
xlim(0,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Dollars)") +
theme_classic()
ggplot(data = summaryData, aes(propComplete, Earnings)) +
geom_point(aes(color = Group), size = 2, show.legend = F) +
geom_line(aes(tempLine, earnFitLine), size = lthick, alpha = 0.7) +
scale_color_manual(values = cols) +
xlim(0.3,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Dollars)") +
theme_classic()
ggplot(data = summaryData, aes(propComplete, Earnings)) +
geom_point(aes(color = Group), size = 2, show.legend = F) +
geom_line(aes(tempLine, earnFitLine), size = lthick, alpha = 0.7) +
scale_color_manual(values = cols) +
xlim(0.2,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Cents)") +
theme_classic()
ggplot(data = summaryData, aes(propComplete, Earnings)) +
geom_point(aes(color = Group), size = 2, show.legend = F) +
geom_line(aes(tempLine, earnFitLine), alpha = 0.7) +
scale_color_manual(values = cols) +
xlim(0.2,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Cents)") +
theme_classic()
warning
warning()
lthick
earnBoxplot <- ggplot(data = summaryData, aes(Group, Earnings, fill = Group)) +
geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
labs(y = "Total Earnings (Cents)", x = "") +
theme_classic()
# earnings (inverse-U, which makes sense because either over or under accepting are detrimental to earnings)
# plot(summaryData$propComplete[indxWait],
#      summaryData$Earnings[indxWait],
#      main = "Total Earnings as a Function of Proportion Accepted",
#      xlab = "Total Proportion Completed",
#      ylab = "Total Earned",
#      col=cols[1],
#      xlim=c(0.2,1),
#      ylim = c(1000,2000),
#      pch=16,
#      cex = lthick - 0.5)
# points(summaryData$propComplete[indxCog],
#        summaryData$Earnings[indxCog],
#        col=cols[2],
#        pch=16,
#        cex = lthick - 0.5)
# points(summaryData$propComplete[indxPhys],
#        summaryData$Earnings[indxPhys],
#        col=cols[3],
#        pch=16,
#        cex = lthick - 0.5)
# points(summaryData$propComplete[indxEasy],
#        summaryData$Earnings[indxEasy],
#        col=cols[4],
#        pch=16,
#        cex = lthick - 0.5)
# legend("topright",
#        lbls,
#        fill = cols,
#        cex = 0.8)
# lines(x, coeffsEarn[1] + coeffsEarn[2]*x + coeffsEarn[3]*(x^2),
#        col="black",
#       lwd = lthick)
earnFitplot <- ggplot(data = summaryData, aes(propComplete, Earnings)) +
geom_point(aes(color = Group), size = 2, show.legend = F) +
geom_line(aes(tempLine, earnFitLine), size = 1.5, alpha = 0.7) +
scale_color_manual(values = cols) +
xlim(0.2,1) +
labs(x = "Proportion Accepted", y = "Total Earned (Cents)") +
theme_classic()
grid.arrange(earnBoxplot, earnFitplot, ncol = 2)
grid.arrange(earnBoxplot, earnFitplot, ncol = 2)
coeffsEarn
summary(lmEarn)
summaryEarn <- summary(lmEarn)
summaryEarn$coefficients
summaryEarn$coefficients[3,1]
summaryEarn$coefficients[3,2]
summaryEarn$fstatistic
summaryEarn$fstatistic[1]
summaryEarn$r.squared
trueProp
splitData_tests
splitData_prop
splitData_prop <- round(sum(trueProp$Deviation_pval < 0.05, na.rm = T) / 36, digits = 2)
splitData_prop
trueProp$Deviation_pval
round(trueProp$Deviation_pval, digits = 2)
round(trueProp$Deviation_pval, digits = 3)
trueProp$Deviation_pval <- round(p.adjust(splitData_tests, method = "BY"), digits = 2)
# Proportion of significant deviations from optimality
splitData_prop <- round(sum(trueProp$Deviation_pval < 0.05, na.rm = T) / 36, digits = 2)
trueProp
trueProp[trueProp$Deviation_pval < 0.05, ]
trueProp$Deviation_pval[trueProp$Deviation_pval == NaN] <- 1
trueProp
trueProp$Deviation_pval[is.nan(trueProp$Deviation_pval)] <- 1
trueProp
trueProp[trueProp$Deviation_pval < 0.05, ]
### THE PLOTS FOR YALE
# Ggplot made plotting way easier than the previous version
# This is in case you don't want to plot the easy condition (easier to see)
trueProp2 <- trueProp[-(28:36), ]
a1 <- ggplot(data = trueProp, aes(x=interaction(Reward, Handling), y=propComplete, color=Group)) +
geom_point(size=3) +
geom_errorbar(aes(ymin=propComplete-SE, ymax=propComplete+SE), width=0.2, size=1) +
geom_line(aes(group = interaction(Handling, Group)), size=1) +
geom_point(aes(y=round(Optimal)), shape = 24, fill = "grey48", color = "grey48", size = 3, show.legend = F) +
labs(x = "Reward.Handling", y = "Proportion Accepted", title = "Proportion Accepted per Handling and Reward Combination") +
scale_color_manual(values=cols) +
theme_classic()
a1
# just to make the logistic plotting comply with the function
allProp2 <- allProp2[order(as.character(allProp2$Group), decreasing = F), ]
# This transformation is necessary for a proper binomial fit of proportion data
totalQuit <- allProp2$totalTrials - allProp2$totalComplete
testBinom <- cbind(allProp2$totalComplete,totalQuit)
# Using a mixed-model fitted with GLMER
# Note: GLMER does not take quasi family distributions
# ranef() to display the random intercepts, fixef() for the model coefficients
# fit model
mixLogis_main <- list()
allProp2 <- within(allProp2, Group <- relevel(Group, ref = "Wait"))
mixLogis_main$Wait <-  glmer(testBinom ~ Group + Handling + Reward + (1 | SubjID), family = "binomial", data = allProp2)
allProp2 <- within(allProp2, Group <- relevel(Group, ref = "Cognitive"))
mixLogis_main$Cognitive <-  glmer(testBinom ~ Group + Handling + Reward + (1 | SubjID), family = "binomial", data = allProp2)
allProp2 <- within(allProp2, Group <- relevel(Group, ref = "Physical"))
mixLogis_main$Physical <-  glmer(testBinom ~ Group + Handling + Reward + (1 | SubjID), family = "binomial", data = allProp2)
allProp2 <- within(allProp2, Group <- relevel(Group, ref = "Easy"))
mixLogis_main$Easy <-  glmer(testBinom ~ Group + Handling + Reward + (1 | SubjID), family = "binomial", data = allProp2)
# Coefficient matrices for all reference combos
t1 <- c(summary(mixLogis_main$Wait)$coefficients[2:4,1], GroupWait = 0)
t2 <- c(summary(mixLogis_main$Cognitive)$coefficients[2:4,1], GroupCognitive = 0)
t3 <- c(summary(mixLogis_main$Physical)$coefficients[2:4,1], GroupPhysical = 0)
t4 <- c(summary(mixLogis_main$Easy)$coefficients[2:4,1], GroupEasy = 0)
mixLogis_mainBetas <- cbind(merge(t1,t2, by = 0), merge(t1,t3,by=0)[,3], merge(t1,t4,by=0)[,3])
dimnames(mixLogis_mainBetas) <- list(cond[c(2,4,3,1)],c("Group",cond))
mixLogis_mainBetas <- as.matrix(mixLogis_mainBetas[,c(3,5,4,2)])
# And their respective p-values
t1 <- c(summary(mixLogis_main$Wait)$coefficients[2:4,4], GroupWait = 1)
t2 <- c(summary(mixLogis_main$Cognitive)$coefficients[2:4,4], GroupCognitive = 1)
t3 <- c(summary(mixLogis_main$Physical)$coefficients[2:4,4], GroupPhysical = 1)
t4 <- c(summary(mixLogis_main$Easy)$coefficients[2:4,4], GroupEasy = 1)
mixLogis_mainPvals <- cbind(merge(t1,t2, by = 0), merge(t1,t3,by=0)[,3], merge(t1,t4,by=0)[,3])
dimnames(mixLogis_mainPvals) <- list(cond[c(2,4,3,1)],c("Group",cond))
mixLogis_mainPvals <- as.matrix(mixLogis_mainPvals[,c(3,5,4,2)])
# Create CIs
sd <- sqrt(diag(vcov(mixLogis_main$Wait)))
mixLogisCI <- cbind(Est = fixef(mixLogis_main$Wait), LL = fixef(mixLogis_main$Wait) - 1.96 * sd, UL = fixef(mixLogis_main$Wait) + 1.96 * sd)
# plot random intercepts in increasing order
#RI1 <- qplot(seq(83), sort(ranef(mixLogis_main$Wait)$SubjID[,1]), color = cols[1], show.legend = F) + theme_classic()
# plot per subject (as expected, the intercepts are highest for those who accepted everythiing)
temp <- cbind(summaryData$Group,
ranef(mixLogis_main$Wait)$SubjID)#,
#Colors = c(rep(cols[1],nSubsW),rep(cols[2],nSubsC),rep(cols[3],nSubsP),rep(cols[4],nSubsE)))
colnames(temp) <- list("Group", "RandIntercept")
RI1 <- qplot(x = Group, y = RandIntercept, data = temp, geom = "boxplot", fill = Group, show.legend = F) + scale_fill_manual(values = cols) + theme_classic()
par(mfrow=c(1,2))
RI1
# plot coefficient matrix (show pvals!)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
rm(temp,t1,t2,t3,t4)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -4.5, cex = 1.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -2, cex = 1.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -6, cex = 1.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -10, cex = 1.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -15, cex = 1.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -12, cex = 1.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -11, cex = 1.5)
# plot coefficient matrix (show pvals!)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -20, cex = 1.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -5, cex = 1.5)
# plot coefficient matrix (show pvals!)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -1, cex = 1.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5)
?mtext
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5, at = 20)
# plot coefficient matrix (show pvals!)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5, at = 2)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5, at = 5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5, at = 3)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5, at = 2)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5, at = 2.2)
# plot coefficient matrix (show pvals!)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Subjects", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5, at = 2.5)
corrplot(abs(mixLogis_mainBetas), p.mat = mixLogis_mainPvals, is.corr = F, method = "color", tl.col = "black", tl.srt = 0, insig = "p-value", sig.level = -1, type = "lower")
mtext("Comparison", side = 2, line = -11, cex = 1.5)
mtext("Reference Group", side = 3, line = -3, cex = 1.5, at = 2.5)
summary(mixLogis_main$Wait)
mixLogis_mainBetas
length(mixLogis_main)
mixLogis_main$Summary <- summary(mixLogis_main)
mixLogis_main$Summary
mixLogis_main$Summary <- summary(mixLogis_main$Wait)
mixLogis_main$Summary
mixLogis_main$Summary$coefficients
mixLogis_main$Cognitive
permuteOCTest
sapply(permuteOCTest, "[[", Pval)
permuteOCTest[[1]]$Pval
sapply(permuteOCTest, "[[", "Pval")
anovaOC
anovaOC[1,1]
anovaOC[1]
anovaOC[1][1,2]
anovaOC[1][1]
anovaOC[[1]]
aov(Gamma ~ Group, data = summaryOC)
test <- aov(Gamma ~ Group, data = summaryOC)
test$coefficients
test$effects
anovaOC
test$fitted.values
test$assign
test$qr
test$xlevels
test$terms
test$model
test$xlevels
test$coefficients
anovaOC
anovaOC[1,1]
class(anovaOC)
as.matrix(anovaOC)
as.matrix(anovaOC)[1,1]
as.data.frame(anovaOC)
str(anovaOC)
t1 <- str(anovaOC)
t1
anovaOC[[1]]$`F value`
anovaOC[[1]]$`F value`[1]
Fval <- anovaOC[[1]]$`F value`[1]
Fval
anovaOC
anovaOC[[1]]$`Pr(>F)`
anovaOC[[1]]$`Pr(>F)`[1]
1 - (1.418/6.352)
tidy(aov(Gamma ~ Group, data = summaryOC))
1.418/ (1.418 + 6.352)
anovaOC[[1]]$`Sum Sq`
Rsquared_aov <- anovaOC[[1]]$`Sum Sq`[1] / sum(anovaOC[[1]]$`Sum Sq`)
Rsquared_aov
sapply(permuteOCTest, "[[", "Pval")
plot(sapply(permuteOCTest, "[[", "Pval"))
permuteOCTest$WvC$Pval
(4 + 8 + 20) / (2*3 + 14*3)
(8 + 20) / (10*2 + 6*3)
(20) / (14*1 + 2*3)
(20) / (14*1 + 2*3 + 2)
(4 + 8 + 20) / (2*3 + 14*3 + 2)
(8 + 20) / (10*2 + 6*3 + 2)
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.7) +
geom_hline(yintercept = 0.7, alpha = 0.7) +
geom_hline(yintercept = 0.9, alpha = 0.7) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
optimizeOCModel <- function(Data, Algorithm = "NLOPT_LN_NEWUOA") {
# Prep data
handling <- Data$Handling
reward <- Data$Reward
choice <- Data$Choice
# Prep list of results to be returned
out <- list()
out$percentQuit <- (sum(choice==0) / length(choice)) * 100
out$percentAccept <- (sum(choice==1) / length(choice)) * 100
miss <- (choice != 1) & (choice != 0)
out$percentMiss <- (sum(miss) / length(choice))  * 100
choice <- choice[!miss]
reward <- as.numeric(reward[!miss])
handling <- as.numeric(handling[!miss])
# Establish lower and upper bounds
LB <- log((min(reward)/max(handling)) * 0.99)
UB <- log((max(reward)/min(handling)) * 1.01)
# Begin defining parameters
# If choices are one-sided (i.e. all accepted)
if ((sum(choice) == length(choice)) | (sum(choice) == 0)) {
ifelse(sum(choice) == length(choice), out$Gamma <- exp(LB), out$Gamma <- exp(UB))
out$Scale <- NA
out$LL <- 0
} else {
# Create a feasible region (search space)
params <- as.matrix(expand.grid(scale = c(-1, 1), gamma = seq(LB, UB, length = 3)))
# Create a list to check the minimization of the negative log lik.
info <- list()
info$negLL <- Inf
# Define the options to be used during optimization
# Consider looking into other optimization algorithms and global minima
opts <- list("algorithm" = Algorithm,
"xtol_rel" = 1.0e-8)
# Optimize the sOC over all possible combinations of starting points
for (i in seq(nrow(params))) {
tempInfo <- nloptr(x0 = params[i, ],
eval_f = negLogLik,
lb = c(log(0.001), LB),
ub = c(-log(0.001), UB),
opts = opts,
choice = choice,
handling = handling,
reward = reward)
if (tempInfo$objective < info$negLL) {
#print("Minimized")
info$negLL <- tempInfo$objective
info$params <- tempInfo$solution
}
}
out$Gamma <- exp(info$params[2])
out$Scale <- exp(info$params[1])
out$LL <- -info$negLL
}
# Summarize the outputs
out$LL0 <- log(0.5) * length(choice)
out$Rsquared <- 1 - (out$LL/out$LL0)
out$subjOC <- out$Gamma * handling
out$p <- 1 / (1 + exp(-(out$Scale*(reward - out$subjOC))))
out$predicted <- reward > out$subjOC
out$predicted[out$predicted == TRUE] <- 1
out$percentPredicted <- (sum(out$predicted == choice) / length(choice)) * 100
# adjust the probabilities in case of extreme gammas
if (out$Gamma <= exp(LB)) {
out$Gamma <- exp(LB) # temporary condition because Nlopt is not respecting the lower bound
out$p <- rep(1, length(choice))
} else if (out$Gamma == exp(UB)) {
out$p <- rep(0, length(choice))
}
return(out)
}
waitOC <- sapply(waitData, function(Data) {optimizeOCModel(Data)$Gamma})
cogOC <- sapply(cogData, function(Data) {optimizeOCModel(Data)$Gamma})
physOC <- sapply(physData, function(Data) {optimizeOCModel(Data)$Gamma})
easyOC <- sapply(easyData, function(Data) {optimizeOCModel(Data)$Gamma})
# Summarize for plotting
summaryOC <- data.frame(Group = rep(cond, each = nSubsC),
Gamma = c(waitOC, cogOC, physOC, easyOC))
summaryOC$Group <- factor(summaryOC$Group, levels = cond, ordered = T)
summaryOC
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.7) +
geom_hline(yintercept = 0.7, alpha = 0.7) +
geom_hline(yintercept = 0.9, alpha = 0.7) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.7) +
geom_hline(yintercept = 0.7, alpha = 0.7) +
geom_hline(yintercept = 0.9, alpha = 0.7) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) + ylim(0,2) +
theme_classic()
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.7) +
geom_hline(yintercept = 0.7, alpha = 0.7) +
geom_hline(yintercept = 0.9, alpha = 0.7) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) + ylim(0,1.5) +
theme_classic()
# plot
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.7, color = "purple", size = 2) +
geom_hline(yintercept = 0.7, alpha = 0.7, color = "yellow", size = 2) +
geom_hline(yintercept = 0.9, alpha = 0.7, size = 2) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
ylim(0,1.3) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.7, color = "purple", size = 1.5) +
geom_hline(yintercept = 0.7, alpha = 0.7, color = "yellow", size = 1.5) +
geom_hline(yintercept = 0.9, alpha = 0.7, size = 1.5) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
ylim(0,1.3) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.9, color = "gray30", size = 1.5) +
geom_hline(yintercept = 0.7, alpha = 0.9, color = "gray50", size = 1.5) +
geom_hline(yintercept = 0.9, alpha = 0.9, color = "gray80", size = 1.5) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
ylim(0,1.3) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.9, color = "gray40", size = 1.5) +
geom_hline(yintercept = 0.7, alpha = 0.9, color = "gray50", size = 1.5) +
geom_hline(yintercept = 0.9, alpha = 0.9, color = "gray80", size = 1.5) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
ylim(0,1.3) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.9, color = "gray40", size = 1.5) +
geom_hline(yintercept = 0.7, alpha = 0.9, color = "gray50", size = 1.5) +
geom_hline(yintercept = 0.9, alpha = 0.9, color = "gray90", size = 1.5) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
ylim(0,1.3) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.9, color = "gray20", size = 1.5) +
geom_hline(yintercept = 0.7, alpha = 0.9, color = "gray40", size = 1.5) +
geom_hline(yintercept = 0.9, alpha = 0.9, color = "gray60", size = 1.5) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
ylim(0,1.3) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
# plot
ggplot(summaryOC, aes(Group, Gamma, fill = Group)) +
geom_hline(yintercept = 0.64, alpha = 0.9, color = "gray20", size = 1.5) +
geom_hline(yintercept = 0.7, alpha = 0.9, color = "gray40", size = 1.5) +
geom_hline(yintercept = 0.9, alpha = 0.9, color = "gray60", size = 1.5) +
geom_dotplot(stackdir = 'center', binaxis = 'y', show.legend = F) +
ylim(0,1.3) +
#geom_boxplot(show.legend = F) +
scale_fill_manual(values = cols) +
theme_classic()
reward
LB
cogData[[1]]
temp <- cogData[[1]]
min(temp$Reward)
max(temp$Handling)
max(temp$Reward)
min(temp$Handling)
4/14
